definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.CardData:
    properties:
      ballType:
        type: string
      baller:
        type: string
      batsmen:
        type: string
      matchId:
        type: string
      prevRuns:
        type: integer
      runs:
        type: integer
    required:
    - ballType
    - baller
    - batsmen
    - matchId
    type: object
  models.Career:
    properties:
      averageScore:
        type: number
      ballsBowled:
        description: Balls Bowled
        type: integer
      ballsFaced:
        type: integer
      bowlingAverage:
        type: number
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      economy:
        type: number
      fifties:
        type: integer
      fours:
        type: integer
      highestScore:
        description: high score
        type: integer
      hundreds:
        type: integer
      matchesPlayed:
        type: integer
      playerId:
        type: string
      runScored:
        type: integer
      runsConced:
        description: Runs Conceded
        type: integer
      sixes:
        type: integer
      twoHundreds:
        type: integer
      updatedAt:
        type: string
      wickets:
        type: integer
    type: object
  models.Credential:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      password:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      user_id:
        type: string
      userName:
        type: string
    required:
    - email
    - password
    - userName
    type: object
  models.Match:
    properties:
      createdAt:
        type: string
      date:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      matchId:
        type: string
      scorecardId:
        description: scorecard related to it
        type: string
      status:
        type: string
      team1Id:
        type: string
      team2Id:
        type: string
      text:
        description: who won the match/
        type: string
      updatedAt:
        type: string
      userId:
        type: string
      venue:
        type: string
    required:
    - team1Id
    - team2Id
    - venue
    type: object
  models.Player:
    properties:
      country:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      jerseyNo:
        type: integer
      phoneNo:
        type: string
      playerAge:
        type: integer
      playerId:
        type: string
      playerName:
        type: string
      updatedAt:
        type: string
    required:
    - country
    - jerseyNo
    - phoneNo
    - playerAge
    - playerName
    type: object
  models.Response:
    properties:
      code:
        type: integer
      data: {}
      status:
        type: string
    type: object
  models.Team:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      playerId:
        type: string
      teamCaptain:
        type: string
      teamId:
        type: string
      teamName:
        type: string
      teamType:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
    required:
    - teamCaptain
    - teamName
    - teamType
    type: object
  models.Toss:
    properties:
      decision:
        type: string
      head_team:
        type: string
      match_id:
        type: string
      tail_team:
        type: string
      toss_id:
        type: string
      toss_won:
        type: string
    required:
    - head_team
    - match_id
    - tail_team
    type: object
host: localhost:8000
info:
  contact: {}
  description: API Documentation for Cric Heros
  title: Cric Heros API
  version: 1.0.0
paths:
  /addCareer:
    post:
      consumes:
      - application/json
      description: Add player career
      parameters:
      - description: Player ID
        in: query
        name: id
        required: true
        type: string
      - description: Adds Player career
        in: body
        name: playerCareer
        required: true
        schema:
          $ref: '#/definitions/models.Career'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Player
  /addPlayertoTeam:
    post:
      consumes:
      - application/json
      description: Add player to team
      parameters:
      - description: ID of the team
        in: query
        name: id
        required: true
        type: string
      - description: Array of players
        in: body
        name: player
        required: true
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Team
  /addToScoreCard:
    post:
      consumes:
      - application/json
      description: stores players info in scorecard
      parameters:
      - description: ScoreCard details
        in: body
        name: details
        required: true
        schema:
          $ref: '#/definitions/models.CardData'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Scorecard
  /adminRegister:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: Registers a user
        in: body
        name: UserDetails
        required: true
        schema:
          $ref: '#/definitions/models.Credential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Authentication
  /ballUpdate:
    put:
      consumes:
      - application/json
      description: Update the ball
      parameters:
      - description: Id of the ball
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Ball
  /createMatch:
    post:
      consumes:
      - application/json
      description: Create the match between the teams
      parameters:
      - description: Match details
        in: body
        name: match
        required: true
        schema:
          $ref: '#/definitions/models.Match'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Match
  /createPlayer:
    post:
      consumes:
      - application/json
      description: Creates a new Player
      parameters:
      - description: Create Player
        in: body
        name: player
        required: true
        schema:
          $ref: '#/definitions/models.Player'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Player
  /createTeam:
    post:
      consumes:
      - application/json
      description: Creates a team
      parameters:
      - description: ID of the user
        in: query
        name: id
        required: true
        type: string
      - description: Details of the team
        in: body
        name: TeamDetails
        required: true
        schema:
          $ref: '#/definitions/models.Team'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Team
  /decisionUpdate:
    put:
      consumes:
      - application/json
      description: Updates the decison taken by the team after wining the toss
      parameters:
      - description: Descision Updated
        in: body
        name: toss
        required: true
        schema:
          $ref: '#/definitions/models.Toss'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Toss
  /deleteTeamByID:
    delete:
      consumes:
      - application/json
      description: Delete the team
      parameters:
      - description: ID of the team
        in: query
        name: id
        required: true
        type: string
      - description: ID of the user
        in: body
        name: user_id
        required: true
        schema:
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Team
  /endInning:
    post:
      consumes:
      - application/json
      description: Ends the current team innings
      parameters:
      - description: Id of the team to end its inning
        in: body
        name: team_id
        required: true
        schema:
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Inning
  /endMatch:
    post:
      consumes:
      - application/json
      description: Ends the match and updates the scorecard of every player
      parameters:
      - description: Id of the match to end
        in: body
        name: match_id
        required: true
        schema:
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Match
  /forgotPassword:
    post:
      consumes:
      - application/json
      description: updates the password for a user
      parameters:
      - description: email of the user
        in: body
        name: email
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Authentication
  /login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: Log in the user
        in: body
        name: UserDetails
        required: true
        schema:
          $ref: '#/definitions/models.Credential'
      responses:
        "200":
          description: OK
          schema:
            type: string
      tags:
      - Authentication
  /resetPassword:
    post:
      consumes:
      - application/json
      description: Resests the user password
      parameters:
      - description: email of the user
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Authentication
  /retirePlayer:
    delete:
      consumes:
      - application/json
      description: Shows the list of all the player
      parameters:
      - description: Id of the player
        in: body
        name: id
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Player
  /showMatch:
    post:
      consumes:
      - application/json
      description: Show the list of matches
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Match
  /showPlayer:
    get:
      consumes:
      - application/json
      description: Shows the list of all the player
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            type: string
      tags:
      - Player
  /showPlayerID:
    get:
      consumes:
      - application/json
      description: Shows the list of all the player
      parameters:
      - description: ID of the player
        in: body
        name: id
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Player
  /showScoreCard:
    post:
      consumes:
      - application/json
      description: Shows the score card for the current matcha
      parameters:
      - description: Id of the match whose scoredcard is to be viewed
        in: body
        name: match_id
        required: true
        schema:
          type: object
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Scorecard
  /showTeamByID:
    post:
      consumes:
      - application/json
      description: Shows the list of teams
      parameters:
      - description: ID of the team
        in: body
        name: team_id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Team
  /showTeams:
    get:
      consumes:
      - application/json
      description: Shows the list of teams
      parameters:
      - description: ID of the User
        in: query
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Team
  /tossResult:
    post:
      consumes:
      - application/json
      description: Give the random result of coin toss and which team won the toss
      parameters:
      - description: Toss Details
        in: body
        name: toss
        required: true
        schema:
          $ref: '#/definitions/models.Toss'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Toss
  /updatePassword:
    post:
      consumes:
      - application/json
      description: updates the password for a user
      parameters:
      - description: ID of the user whose passsword is to be changed
        in: body
        name: user_id
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Authentication
  /userRegister:
    post:
      consumes:
      - application/json
      description: Registers a user
      parameters:
      - description: Registers a user
        in: body
        name: UserDetails
        required: true
        schema:
          $ref: '#/definitions/models.Credential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      tags:
      - Authentication
swagger: "2.0"
